socket = io();

$(document).ready(function () {
    $('.nav-tabs li button[data-bs-target="#' + ag + '"]').addClass('active');
    // getReward();
    setTimeout(getReward, 1000)
});

$("form[supmegroup=true]").submit(async function (e) {
    e.preventDefault();
    let _this = this;
    let url = $(_this).attr("action");
    let method = $(_this).attr("method");
    let redirect = $(_this).attr("redirect");
    let data = $(_this).serialize();
    let option = {
        type: method,
        url: url,
        data: data,
        dataType: "json",
    };
    option.success = async function (response) {
        if (response.success) {
            if (redirect) {
                window.location.href = redirect;
                return;
            }
        }
        $('#err-msg').html(`<p class="text-${response.success ? 'success' : 'danger'}">${response.message}</p>`)
    };
    $.ajax(option);
});

// const clipboard = new ClipboardJS(".copy-text"),
//     paramsData = new URLSearchParams(window.location.search),
//     hashId = $("body").data("id"),
//     socket = io({
//         transports: ["websocket"]
//     });

$('#form-nvngay').submit(async function (e) {
    e.preventDefault(); // Ngừng hành động gửi form mặc định

    // Lấy giá trị từ các thuộc tính của form
    let url = $(this).attr("action"); // Đảm bảo dùng $(this) thay vì _this
    let method = $(this).attr("method");

    // Lấy nút submit và giá trị data-value từ nó
    let button = $(this).find('button[type=submit]');
    let id = button.attr('data-value'); // Sửa lại 'data-value' cho đúng

    // In ra để kiểm tra
    console.log("URL:", url);
    console.log("Method:", method);
    console.log("Button Data Value:", id);

    // Thực hiện hành động gửi form bằng AJAX (ví dụ)
    // Ví dụ gửi form với dữ liệu 'id'
    try {
        let response = await $.ajax({
            url: url,
            method: method,
            data: {id: id}, // Dữ liệu cần gửi
            success: function (response) {
                if (response.success) {
                    if (redirect) {
                        window.location.href = redirect;
                        return;
                    }
                }
                $('#err-msg').html(`<p class="text-${response.success ? 'success' : 'danger'}">${response.message}</p>`)
            },
            error: function (error) {
                console.error("Error sending form:", error);
            }
        });
    } catch (error) {
        console.error("AJAX Error:", error);
    }
});

$("#reload-kbbal").click(function () {
    $("#reload-kbbal").addClass('rb-loading');
    axios.post("../sbcoin").then(res => {
        if (res.data.success) {
            setTimeout(function () {
                $('#sbbal-txt').html(Intl.NumberFormat('en-US').format(res.data.balance));
                $("#reload-kbbal").removeClass('rb-loading');
            }, 2000)
        }
    }).catch(err => {
    })
})

$("#btn-withdraw").click(function () {

    let wamount = $('input#wamount').val().replace(/,/g, '')

    axios.post("../ruttien", {wamount}).then(res => {
        $('#modal-notes').modal('show');
        $('.comments__text').html(res.data.message);
    })
})

function getReward() {
    let gameType = $(".games.active").data("type");

    if (gameType) {
        axios.post("../api/v2/rewards", {gameType: gameType}).then(res => {
            loadReward(null, res.data)
        }).catch(err => {
            loadReward(err)
        })
    }
}

function loadReward(err, response) {
    let dataGame = $(".games.active");
    err && Swal.fire("Thông Báo", `Có lỗi xảy ra ${err.message}`, "warning"), !response.success && Swal.fire("Thông Báo", response.message, "error"), response.success && ($("#gameName").html(`Cách Chơi ${dataGame.data("name")}`), $("#gameNoti").html(dataGame.data("description")), $("#tableReward").html(""), response.data.map(data => {
        $('#listButtonBet').append(`<div class="col-md-6 col-xs-6 form-group"><button class="btn w-100 btn btn-primary" style="border-color: #f0e2af;" onclick="bet(${data.content},this)"><b>${data.content}</b></button></div>`);
        $("#tableReward").append(`<tr><td><div class="dashbox__table-text"><b>${data.content}${username ? `&nbsp;<a href="javascript:void(0);" data-id="${data.content}" data-msg="Đã copy: ${data.content}" class="mncp copy-bt">&nbsp;</a>` : ''}</div></b></td><td><div class="dashbox__table-text"><code>${data.numberTLS.join('</code> <code>')}</code></div></td><td><strong><span style="color: red;">x</span> ${data.amount}</strong></td></tr>`)
    }))
}

$("body").on("click", ".games", (function (e) {
    let _this = $(this);
    _this.removeClass("active"), $(".games.actvie").removeClass("active").addClass(""), _this.addClass("active"), !_this.data("game") && getReward()
}))

$("body").on("click", ".sicbo_btn", (function (e) {
    let _this = $(this);
    _this.removeClass("none-active"), $(".sicbo_btn.active").removeClass("active").addClass("none-active"), _this.addClass("active")
}))

$("body").on("click", "#btn-bet", (function (e) {
    let amount = $('input#bet-amount').val().replace(/,/g, '');
    let comment = $(".sicbo_btn.active").data("val");

    // $('#seconds').html(`<img src="/themes/images/dice-loading.svg">`);
    axios.post("../xxtg", {comment, amount}).then(res => {
        $('#modal-notes .comments__text').html(res.data.message);
        $('#modal-notes').modal('show');
        if (res.data.success) {
            $('#seconds').html(`<img src="/themes/images/dice-loading.svg">`);
            $('#sbbal-txt').html(Intl.NumberFormat('en-US').format(res.data.balance));
            loadHistory(res.data);
        }
    }).catch(err => {
        $('#seconds').html(``);
    })
}))

socket.on("cltx_telegram", data => {
    const dataDecode = JSON.parse(decrypt(data));

    $('#seconds').html(`<img src="/themes/images/dices/dice-${dataDecode.dice.value}.svg">`);
    $('#sbbal-txt').html(Intl.NumberFormat('en-US').format(dataDecode.balance));
    if (dataDecode.status == 'win' && username == dataDecode.username) {
        $('#modal-notes').modal('hide');
        $('#modal-win .comments__text').html(data.message);
        $('#modal-win').modal('show');
        loadHistory(data);
    }
    if (dataDecode.status == 'lose' && username == dataDecode.username) {
        loadHistory(dataDecode);
    }
});

socket.on("cltx", data => {
    const dataDecode = JSON.parse(decrypt(data));
    if (username == dataDecode.username) {
        loadHistory(dataDecode);
    }
    loadHistoryAll(dataDecode);
});

function decrypt(encryptedText) {

    const secretKey = "FE81ZPW4SH8VE0XMDXUZ2UC68HC9WB65"; // Khóa bí mật (32 bytes cho AES-256)

    // Tách dữ liệu mã hóa và IV từ chuỗi (chuỗi có dạng "data:iv")
    const [encryptedData, ivBase64] = encryptedText.split(':');

    // Chuyển IV từ Base64 thành WordArray
    const iv = CryptoJS.enc.Base64.parse(ivBase64);

    // Giải mã dữ liệu
    const decryptedBytes = CryptoJS.AES.decrypt(encryptedData, CryptoJS.enc.Utf8.parse(secretKey), {iv: iv});

    // Chuyển kết quả giải mã thành chuỗi UTF-8
    const decryptedText = decryptedBytes.toString(CryptoJS.enc.Utf8);

    return decryptedText;
}

function loadHistoryAll(response) {
    $("#tableHistoryAll").html('');
    response.histories.map(data => {
        $("#tableHistory").append(`
            <tr>
            <td>${data.gameType}</td>
            <td><code>${data.comment}</code></td>
            <td>${data.transId}</td>
            <td>${Intl.NumberFormat("en-US").format(data.amount)}</td>
            <td><div class="dashbox__table-text"><span class="gstatus ${data.result}">${data.result.toUpperCase()}</span></div></td>
            <td>
            <div class="dashbox__table-text">
                    ${data.result === 'lose' || data.result === 'wait' ? '' : `<span class="gstatus ${data.paid ? data.paid : ''}">${data.paid ? data.paid.toUpperCase() : ''}</span>`}
            </div>
            </td>
            <td>${moment(data.createdAt).format('HH:mm:ss DD-MM-YYYY')}</td>
            <td></td>
            <td><div class="dashbox__table-text"><button type="button" data-bs-toggle="modal" data-content="${data.description.replace(/"/g, '&quot;')}" class="catalog__btn catalog__btn--view show-notes" data-bs-target="#modal-notes"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M21.92,11.6C19.9,6.91,16.1,4,12,4S4.1,6.91,2.08,11.6a1,1,0,0,0,0,.8C4.1,17.09,7.9,20,12,20s7.9-2.91,9.92-7.6A1,1,0,0,0,21.92,11.6ZM12,18c-3.17,0-6.17-2.29-7.9-6C5.83,8.29,8.83,6,12,6s6.17,2.29,7.9,6C18.17,15.71,15.17,18,12,18ZM12,8a4,4,0,1,0,4,4A4,4,0,0,0,12,8Zm0,6a2,2,0,1,1,2-2A2,2,0,0,1,12,14Z"></path></svg></button></div></td>
        </tr>`)
    })
}

function loadHistory(response) {
    $("#tableHistory").html('');
    response.histories.map(data => {
        $("#tableHistory").append(`
            <tr>
            <td>${data.gameType}</td>
            <td><div class="dashbox__table-text"><code>${data.comment}</code></div></td>
            <td>${data.transId}</td>
            <td>${Intl.NumberFormat("en-US").format(data.amount)}</td>
            <td><div class="dashbox__table-text"><span class="gstatus ${data.result}">${data.result.toUpperCase()}</span></div></td>
            <td>
            <div class="dashbox__table-text">
                    ${data.result === 'lose' || data.result === 'wait' ? '' : `<span class="gstatus ${data.paid ? data.paid : ''}">${data.paid ? data.paid.toUpperCase() : ''}</span>`}
            </div>
            </td>
            <td>${moment(data.createdAt).format('HH:mm:ss DD-MM-YYYY')}</td>
            <td>
                ${data.isCheck ? `<div class="dashbox__table-text"><button type="button" data-bs-toggle="modal" data-content="" class="catalog__btn catalog__btn--view show-notes" data-bs-target="#modal-notes"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M21.92,11.6C19.9,6.91,16.1,4,12,4S4.1,6.91,2.08,11.6a1,1,0,0,0,0,.8C4.1,17.09,7.9,20,12,20s7.9-2.91,9.92-7.6A1,1,0,0,0,21.92,11.6ZM12,18c-3.17,0-6.17-2.29-7.9-6C5.83,8.29,8.83,6,12,6s6.17,2.29,7.9,6C18.17,15.71,15.17,18,12,18ZM12,8a4,4,0,1,0,4,4A4,4,0,0,0,12,8Zm0,6a2,2,0,1,1,2-2A2,2,0,0,1,12,14Z"></path></svg></button></div>` : ''}
            </td>
            <td>
                ${data.description ? `<div class="dashbox__table-text"><button type="button" data-bs-toggle="modal" data-content="${data.description ? data.description.replace(/"/g, '&quot;') : ''}" class="catalog__btn catalog__btn--view show-notes" data-bs-target="#modal-notes"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M21.92,11.6C19.9,6.91,16.1,4,12,4S4.1,6.91,2.08,11.6a1,1,0,0,0,0,.8C4.1,17.09,7.9,20,12,20s7.9-2.91,9.92-7.6A1,1,0,0,0,21.92,11.6ZM12,18c-3.17,0-6.17-2.29-7.9-6C5.83,8.29,8.83,6,12,6s6.17,2.29,7.9,6C18.17,15.71,15.17,18,12,18ZM12,8a4,4,0,1,0,4,4A4,4,0,0,0,12,8Zm0,6a2,2,0,1,1,2-2A2,2,0,0,1,12,14Z"></path></svg></button></div>` : ''}
            </td>
        </tr>`)
    })
}

function loadHistoryAll(response) {
    $("#tableHistoryAll").html('');
    response.allHistories.map(data => {
        $("#tableHistoryAll").append(`
            <tr>
            <td>${data.username}</td>
            <td><div class="dashbox__table-text">${Intl.NumberFormat("en-US").format(data.amount)}</div></td>
            <td><div class="dashbox__table-text">${Intl.NumberFormat("en-US").format(data.bonus)}</div></td>
            <td><div class="dashbox__table-text">${data.gameName}</div></td>
            <td><div class="dashbox__table-text"><code>${data.comment}</code></div></td>
            <td><div class="dashbox__table-text"><span class="gstatus ${data.result}">${data.result.toUpperCase()}</span></div></td>
            <td><div class="dashbox__table-text">${data.time}</div></td>
        </tr>`)
    })
}

$(document).ready(function () {
    $('.sidebar__nav-item:first a').addClass('sidebar__nav-link--active');
    $('.nav-tabs li button[data-bs-target="' + ag + '"]').addClass('active');
    $('.game-list .game-details').removeClass('active');
    $('#' + ag.slice(1)).addClass('active');
    // changeSizeGamePanel();
    // changeSizeTopWeek();
    // loadHistory();
    // loadBanks();
    $('.nav-tabs li button').click(function () {
        if (!$(this).hasClass('active')) {
            var target = $(this).attr('data-bs-target');
            $('.nav-tabs li button').removeClass('active');
            $(this).addClass('active');
            $('.game-list .game-details').removeClass('active');
            $(target).addClass('active');
            changeSizeGamePanel();

        }
    });
});

function formatNumber(value) {
    return value.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

let ismob;ismob=!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);var ag=new URLSearchParams(window.location.search).get("g")?"#"+new URLSearchParams(window.location.search).get("g"):$(".nav-tabs .nav-item:first-child button").attr("data-bs-target")

$(document).on("click", ".copy-bt", function () {
    var t = $(this).attr("data-id");
    navigator.clipboard.writeText(t).then(() => {
        $(this).addClass("copied");
        var t = $(this);
        setTimeout(function () {
            t.removeClass("copied")
        }, 2e3)
    }).catch(t => {
        console.log("Failed to copy text: ", t)
    })
})

function changeSizeGamePanel() {
    if (!ismob) {
        var bankInfosHeight = $('#bank-infos .dashbox').css('height', 'auto').height();
        var gameListHeight = $('.game-details').css('height', 'auto').height();
        if (bankInfosHeight > gameListHeight) {
            $('.game-details').height(bankInfosHeight);
        } else {
            $('#bank-infos .dashbox').height(gameListHeight);
        }
    }
}

$(document).ready(function () {
    $('.sidebar__nav-item:first a').addClass('sidebar__nav-link--active');
    $('.nav-tabs li button[data-bs-target="' + ag + '"]').addClass('active');
    $('.game-list .game-details').removeClass('active');
    // $('#'+ ag.slice(1)).addClass('active');
    changeSizeGamePanel();
    // changeSizeTopWeek();
    // loadHistory();
    // loadBanks();
    $('.nav-tabs li button').click(function () {
        if (!$(this).hasClass('active')) {
            var target = $(this).attr('data-bs-target');
            $('.nav-tabs li button').removeClass('active');
            $(this).addClass('active');
            $('.game-list .game-details').removeClass('active');
            $(target).addClass('active');
            // changeSizeGamePanel();

        }
    });
});

// Lắng nghe sự kiện input
document.getElementById("bet-amount").addEventListener("input", function () {
    let input = this.value;

    // Loại bỏ tất cả các ký tự không phải là số
    input = input.replace(/\D/g, '');

    // Format lại số
    this.value = formatNumber(input);
});